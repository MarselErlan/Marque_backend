"""
Script to add banners to production database
"""

import sys
import os

# Add src to path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from src.app_01.db import get_db
from src.app_01.models.banners.banner import Banner, BannerType
from datetime import datetime, timedelta

def add_production_banners():
    """Add banners to production database"""
    
    # Sample banners with Kyrgyzstan fashion theme
    banners = [
        {
            "title": "–ù–æ–≤–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è",
            "subtitle": "–û—Å–µ–Ω—å-–ó–∏–º–∞ 2024",
            "description": "–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –Ω–∞—à—É –Ω–æ–≤—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø—Ä–µ–º–∏–∞–ª—å–Ω–æ–π –æ–¥–µ–∂–¥—ã –¥–ª—è –º—É–∂—á–∏–Ω",
            "image_url": "/uploads/banners/collection-banner.jpg",
            "banner_type": BannerType.HERO,
            "cta_text": "–°–º–æ—Ç—Ä–µ—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é",
            "cta_url": "/category/men",
            "is_active": True,
            "display_order": 0
        },
        {
            "title": "–°–∫–∏–¥–∫–∏ –¥–æ 80%",
            "subtitle": "–ù–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã",
            "description": "–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫—É–ø–∏—Ç—å —Å—Ç–∏–ª—å–Ω—É—é –æ–¥–µ–∂–¥—É —Å–æ —Å–∫–∏–¥–∫–æ–π",
            "image_url": "/uploads/banners/sale-banner.jpg",
            "banner_type": BannerType.HERO,
            "cta_text": "–ö —Å–∫–∏–¥–∫–∞–º",
            "cta_url": "/search?sort=discount",
            "is_active": True,
            "display_order": 1
        },
        {
            "title": "–ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–µ–º–∏—É–º –∫–ª–∞—Å—Å–∞",
            "subtitle": "–ú–µ—Å—Ç–Ω—ã–µ –±—Ä–µ–Ω–¥—ã –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–∞",
            "description": "–ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –º–µ—Å—Ç–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –æ–¥–µ–∂–¥—ã",
            "image_url": "/uploads/banners/quality-banner.jpg",
            "banner_type": BannerType.HERO,
            "cta_text": "–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ",
            "cta_url": "/",
            "is_active": True,
            "display_order": 2
        },
        {
            "title": "–ë—ã—Å—Ç—Ä–µ–µ –∏ –≤—ã–≥–æ–¥–Ω–µ–µ",
            "subtitle": "–¢–æ–≤–∞—Ä—ã —Å –º–µ—Å—Ç–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–∞",
            "description": "–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å–µ–º—É –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω—É –≤ —Ç–µ—á–µ–Ω–∏–µ 1-3 –¥–Ω–µ–π",
            "image_url": "/uploads/banners/promo-banner.jpg",
            "banner_type": BannerType.PROMO,
            "cta_text": "–°–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã",
            "cta_url": "/search",
            "is_active": True,
            "display_order": 0
        },
        {
            "title": "–ú—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞",
            "subtitle": "–°—Ç–∏–ª—å –¥–ª—è –Ω–∞—Å—Ç–æ—è—â–∏—Ö –º—É–∂—á–∏–Ω",
            "description": "–§—É—Ç–±–æ–ª–∫–∏, —Ä—É–±–∞—à–∫–∏, –¥–∂–∏–Ω—Å—ã –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ",
            "image_url": "/uploads/banners/men-category.jpg",
            "banner_type": BannerType.CATEGORY,
            "cta_text": "–ú—É–∂—á–∏–Ω–∞–º",
            "cta_url": "/category/men",
            "is_active": True,
            "display_order": 0
        }
    ]
    
    db_gen = get_db()
    db = next(db_gen)
    
    try:
        print(f"\n{'='*60}")
        print(f"Adding banners to production database...")
        print(f"{'='*60}\n")
        
        added_count = 0
        for banner_data in banners:
            # Check if banner with this title already exists
            existing = db.query(Banner).filter(Banner.title == banner_data["title"]).first()
            if existing:
                print(f"‚è≠Ô∏è  Banner '{banner_data['title']}' already exists, skipping...")
                continue
            
            banner = Banner(**banner_data)
            db.add(banner)
            added_count += 1
            print(f"‚úÖ Added {banner_data['banner_type'].value} banner: {banner.title}")
        
        db.commit()
        print(f"\n‚ú® Successfully added {added_count} new banners to production database!")
        
        # Show banner summary
        hero_count = db.query(Banner).filter(Banner.banner_type == BannerType.HERO, Banner.is_active == True).count()
        promo_count = db.query(Banner).filter(Banner.banner_type == BannerType.PROMO, Banner.is_active == True).count()
        category_count = db.query(Banner).filter(Banner.banner_type == BannerType.CATEGORY, Banner.is_active == True).count()
        
        print(f"\nüìä Current active banners:")
        print(f"   üéØ Hero banners: {hero_count}")
        print(f"   üéÅ Promo banners: {promo_count}")
        print(f"   üìÅ Category banners: {category_count}")
        print(f"   üìà Total: {hero_count + promo_count + category_count}")
        
    except Exception as e:
        db.rollback()
        print(f"‚ùå Error adding banners: {e}")
        raise
    finally:
        db.close()

if __name__ == "__main__":
    print("\nüé® Adding Banners to Production Database\n")
    add_production_banners()
    print("\nüéâ All done! Test the API at: https://marquebackend-production.up.railway.app/api/v1/banners/\n")

